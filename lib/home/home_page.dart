import 'package:flutter/material.dart';import 'package:flutter_deer_study/home/provider/home_provider.dart';import 'package:flutter_deer_study/order/page/order_page.dart';import 'package:flutter_deer_study/res/colors.dart';import 'package:flutter_deer_study/util/theme_utils.dart';import 'package:flutter_deer_study/widgets/load_image.dart';import 'package:provider/provider.dart';import '../res/dimens.dart';class Home extends StatefulWidget {  const Home({super.key});  @override  State<StatefulWidget> createState() => _HomeState();}class _HomeState extends State<Home> with RestorationMixin {  late List<Widget> _pageList;  HomeProvider provider = HomeProvider();  static const double _imageSize = 25.0;  List<BottomNavigationBarItem>? _list;  final List<String> _appBarTitles = ['订单', '商品', '统计', '店铺'];  final PageController _pageController = PageController();  @override  void initState() {    super.initState();    initData();  }  @override  Widget build(BuildContext context) {    return ChangeNotifierProvider(        create: (_) => provider,        child: Scaffold(          bottomNavigationBar: Consumer<HomeProvider>(            builder: (_, provider, __) {              return BottomNavigationBar(                backgroundColor: context.backgroundColor,                items: _buildBottomNavigationBarItem(),                type: BottomNavigationBarType.fixed,                currentIndex: provider.value,                elevation: 5.0,                iconSize: 21.0,                selectedFontSize: Dimens.font_sp10,                unselectedFontSize: Dimens.font_sp10,                selectedItemColor: Theme.of(context).primaryColor,                unselectedItemColor: Colours.unselected_item_color,                onTap: (index) => _pageController.jumpToPage(index),              );            },          ),          body: PageView(            physics: const NeverScrollableScrollPhysics(),            controller: _pageController,            onPageChanged: (int index) => provider.value = index,            children: _pageList,          ),        ));  }  List<BottomNavigationBarItem> _buildBottomNavigationBarItem() {    if (_list == null) {      const tabImages = [        [          LoadAssetImage(            'home/icon_order',            width: _imageSize,            color: Colours.unselected_item_color,          ),          LoadAssetImage(            'home/icon_order',            width: _imageSize,            color: Colours.app_main,          ),        ],        [          LoadAssetImage(            'home/icon_commodity',            width: _imageSize,            color: Colours.unselected_item_color,          ),          LoadAssetImage(            'home/icon_commodity',            width: _imageSize,            color: Colours.app_main,          ),        ],        [          LoadAssetImage(            'home/icon_statistics',            width: _imageSize,            color: Colours.unselected_item_color,          ),          LoadAssetImage(            'home/icon_statistics',            width: _imageSize,            color: Colours.app_main,          ),        ],        [          LoadAssetImage(            'home/icon_shop',            width: _imageSize,            color: Colours.unselected_item_color,          ),          LoadAssetImage(            'home/icon_shop',            width: _imageSize,            color: Colours.app_main,          ),        ]      ];      _list = List.generate(tabImages.length, (i) {        return BottomNavigationBarItem(          icon: tabImages[i][0],          activeIcon: tabImages[i][1],          label: _appBarTitles[i],          tooltip: _appBarTitles[i],        );      });    }    return _list!;  }  void initData() {    _pageList = [const OrderPage(), const OrderPage(), const OrderPage(), const OrderPage()];  }  @override  void dispose() {    _pageController.dispose();    super.dispose();  }  @override  // TODO: implement restorationId  String? get restorationId => "home";  @override  void restoreState(RestorationBucket? oldBucket, bool initialRestore) {    return registerForRestoration(provider, 'BottomNavigationBarCurrentIndex');  }}